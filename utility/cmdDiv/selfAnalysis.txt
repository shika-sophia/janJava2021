/**
 * @title utility / cmdDiv / selfAnalysis.txt
 * @content 各所に書き散らした考察(独り言)を１か所にまとめておくファイル
 * @author shika
 * @date 2021-01-25
 */
 //====== CmdExecute ======
cmdExecutor("@cd");
C:\Program Files\pleiades\workspace-web\janJava2021
result=0

cmdExecutor("chcp 65001");//chcp 65001 -> UTF-8
Active code page: 65001

cmdExecutor("chcp 932");  //chcp 932 -> Shift-JIS
���݂̃R�[�h �y�[�W: 932
(現在のコード ページ: 932)

cmdExecutor("java -version --chcp 65001");
openjdk version "11.0.5" 2019-10-15
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.5+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.5+10, mixed mode)

//文字化け問題(未解決)
cmdExecutor("java Fake --chcp 65001");

�G���[: ���C���E�N���XFake�����o����у��[�h�ł��܂���ł���
����: java.lang.ClassNotFoundException: Fake
(エラー: メイン・クラスFakeを検出およびロードできませんでした
原因: java.lang.ClassNotFoundException: Fake)

◆絶対パスの問題
cmdExecutor(
    "java -cp C:\\Program Files/pleiades/workspace-web/janJava2021/build/classes/swing/sample
    swing.sample.SampleWindow");
    エラー: メイン・クラスFiles\\pleiades\\workspace-web\\janJava2021\\build\\classes\\swing\\sample
    を検出およびロードできませんでした
    原因: java.lang.ClassNotFoundException:
    Files\\pleiades\\workspace-web\\janJava2021\\build\\classes\\swing\\sample

【考察】2021-01-23
Windowsの「Program Files」に半角スペースが空いているので、
-cp (class-path)オプションを利用すると、「Files～」以下を クラスファイル名と認識している。

それで、C直下に pleiadesを置くんか。
このエクリプスは「Program Files」下に置いてあり、改善するなら C直下に入れ直しが必要。
(註: Program Filesのファイル名をいじるのは禁じ手。この下のコンテンツ全てのPathが狂うので動作しなくなる可能性がある)
↑前にやった。少なくとも eclipseは全てのファイルのビルドパスが崩れて、壊れます。

引っ越しするなら、現在のプロジェクトを全て warファイル(jarも可?)にして
新しい eclipseに入れ直す必要がある。
    ↓
相対パスにすればいい。(ふりだしに戻る)
cmdExecutor("@cd");
C:\Program Files\pleiades\workspace-web\janJava2021
    ↓
それか、 -cpをクラス名の後ろに記述すればいいのかも
◆コマンドラインで検証
cd で カレントをここにする。
(eclipseでコンパイルは済んでいて、classファイルがここにある)
C:\Program Files\pleiades\workspace-web\janJava2021\build\classes>

>java swing.sample.SampleWindow
で実行できる。

ただし、CmdExecute(=このクラス)は一文ずつしか実行できず、
２文を実行すると、その都度、コマンドプロンプトのデフォルトに戻されるようだ。
つまり cdでカレントを移動できないので -cp (= --class-path) 相対パスで一文で実行するしかない。

◆成功！
cmdExecutor("java -cp ./build/classes swing.sample.SampleWindow");

おお、javaからコマンドプロンプト経由で swingプログラムを実行できた！
これで、いちいちデスクトップにソースファイルをコピーしてコマンドプロンプトで実行せんでも
CmdExecuteを呼び出せば、行けるぞ～

(ちなみに私のこのeclipseは
旧バージョン[pleiades-2019-12-java-win-64bit-jre_20200213]

JDKは
C:\Users\sophia>java -version
openjdk version "11.0.7" 2020-04-14
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.7+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.7+10, mixed mode)

のため、そのままeclipseで swingを実行できるのであった。eclipseの引っ越しできないやん。
この CmdExecuteは 最新のeclipseだと、そのまま実行できないため、それ用のクラスです。)
*/
/*
//====== SwingExecute / 2021-01-25 ======
eclipseでこのクラスを直接実行できないときのために、
実行したいクラスに このような main()を用意し、
swing部分はメソッド or コンストラクタにして、
コマンドプロンプトで実行することを考えてみたが

public static void main(String[] args) {
    if(className == null){
        String className = new Object(){ }.getClass().getName();
        new SwingExecute(className);
    } else {
        sampleWnd()
    }
}//main()

これを記述すると
main() -> SwingExecute -> java SampleWind -> main() とループしてしまう。
if文を付けて メソッド呼び出し or コンストラクタ呼び出しにしても同様

「自動でコマンドプロンプト実行」という発想だったが、
SwingExecute(=ここのクラス)の main() に
完全修飾クラス名を手打ちして実行するしかなさそう。(無念・・)

ただ、クラス名からコマンドプロンプトを呼び出す cmdDivクラス群は
ちゃんと機能しているので、今後 使ってみよう。「$1」のところは改良が必要だな。
 */


