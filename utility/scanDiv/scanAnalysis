//###### 考察 / 2021-01-27 ######
◆ScanDiv
    ScanDiv(Scan Division = Scan師団)
    師団: extendsで繋がるクラス群を私は勝手にこう呼んでいる。

    Scannerクラスの入力フォームを、
    今までアプリごとに何回も同じことを記述していたので、
    一般形にした１つの部品を作れないか考えてみた。

    今後、Scannerを使うアプリは、ここのインスタンス１つすれば、
    入力フォームの記述をせずに、質問リスト(questList)だけを渡せば済むようにしたい。

◆ループ
    ScanStr, ScanIntのループを作ろうとして煮詰まったので、
    これを書いて整理しているのだが

    ループの記述は４パターン書かないといけない。
    ①１問１答
    ②１問多答
    ③多問１答
    ④多問多答

    ①１問１答は、③多問１答に含め、②は④に含めることが可能。
    つまり「questList.size() == 1」で１問を表現すればいい。

    すると③多問１答と ④多問多答の２パターンのループが必要。
    メソッドごとに分けたらいいのだが、ループ内の処理は共通しているものが多く、
    ２メソッドにするのも、なんか くやしい。

    共通部分をメソッドにして、ループ部分をif分岐する２メソッド案を採用。
    まずはこれで作ってみるか。

//---- 2021-01-30 ----
◆multiQuest-multiAns時の inList問題
inListは、StrとIntで１つずつ用意してあるが、
multiQuest時は、１つのinListに多問の回答が全部入る。
取り出すときに分割して取り出せば問題ないが、
inList.size()は、全問分の回答数になってしまう。

◆連携質問のケース
ScanDivは、どこでも呼び出せる一般形として記述しているが、
javaSilver.AnswerMakerのように、
一問多答した後、同じ List.size()の〇付けをするようなケースでは、
先のList.size()から、後のfor終了条件が自動的に決定する。

今の一般形のままだと、連携ある質問の終了も [-99: 終了]キーを入力しなければならぬ。

◆Intの終了キー
nextInt()で、InputMismatchExceptionの try-catchをしているので、
当然、整数しか通らなくなる。
終了キーも整数で入力するしかないが、範囲外のを指定するしかない。
しかし、特に範囲を定めない場合は、その値を通常入力することができなくなる問題。


